# docker-compose.yml
services:
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    env_file:
      - ./services/auth-service/.env
    environment:
      NODE_ENV: development
      PORT: "3001"
      CORS_ORIGIN: ${CORS_ORIGIN:-https://localhost:5501}
      FRONTEND_URL: ${FRONTEND_URL:-https://localhost:5501}
    working_dir: /app/services/auth-service
    ports:
      - "3001:3001"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    restart: unless-stopped
    command: ["pnpm", "run", "dev"]

  upload-service:
    build:
      context: .
      dockerfile: services/upload-service/Dockerfile
    env_file:
      - ./services/upload-service/.env
    environment:
      NODE_ENV: development
      PORT: "4010"
      CORS_ORIGIN: ${CORS_ORIGIN:-https://localhost:5501}
      UPLOAD_TOKEN: ${UPLOAD_SERVICE_TOKEN:?Set UPLOAD_SERVICE_TOKEN (OS env or root .env)}
    working_dir: /app/services/upload-service
    ports:
      - "4010:4010"
    depends_on:
      - auth-service
    restart: unless-stopped
    command: ["pnpm", "run", "dev"]

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    env_file:
      - ./services/api-gateway/.env
    environment:
      NODE_ENV: development
      PORT: "8080"
      HOST: "0.0.0.0"
      # Allow all local apps
      CORS_ORIGIN: "http://localhost:5501,https://localhost:5501,http://127.0.0.1:5501,https://127.0.0.1:5501,http://localhost:8090,https://localhost:8090"
      AUTH_SERVICE_URL: http://auth-service:3001
      UPLOAD_SERVICE_URL: http://upload-service:4010
      UPLOAD_SERVICE_TOKEN: ${UPLOAD_SERVICE_TOKEN:?Set UPLOAD_SERVICE_TOKEN (OS env or root .env)}
      # ✅ Enable HTTPS with local certs
      SSL_KEY_PATH: /app/certs/localhost-key.pem
      SSL_CERT_PATH: /app/certs/localhost.pem
      # ✅ WS target for AI Waiter
      VOICE_WS_TARGET: http://ai-waiter-service:7071
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - upload-service
      - ai-waiter-service
    restart: unless-stopped
    volumes:
      # Mount certs folder read-only for HTTPS
      - ./certs:/app/certs:ro

  storefront-host:
    build:
      context: .
      dockerfile: services/storefront-host/Dockerfile
    env_file:
      - ./services/storefront-host/.env
    environment:
      NODE_ENV: development
      PORT: "8090"
      HOST: "0.0.0.0"
      # storefront-host (container) -> Vite (host)
      TASTEBUD_DEV_URL: http://host.docker.internal:3007
      # storefront-host (container) -> api-gateway (container)
      GATEWAY_URL: https://api-gateway:8080
      # Allow local Vite + storefront origins
      CORS_ORIGIN: "http://localhost:3007,https://localhost:3007,http://localhost:8090,https://localhost:8090,http://localhost:5501,https://localhost:5501"
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      AI_WAITER_URL: http://ai-waiter-service:7071
    ports:
      - "8090:8090"
    depends_on:
      - api-gateway
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # === Persistence for transcripts ===
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

  # === AI Waiter (ASR + Brain in one service) ===
  ai-waiter-service:
    build:
      context: ./services/ai-waiter-service
    environment:
      - PORT=7071
      - MONGO_URI=mongodb://mongo:27017
      - WHISPER_MODEL=tiny
      - WHISPER_DEVICE=cpu
      - WHISPER_COMPUTE_TYPE=int8
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1
      - OPENBLAS_NUM_THREADS=1
      - NUMEXPR_NUM_THREADS=1

      # === Groq Whisper v3 (for finalize) ===
      - GROQ_API_KEY=${GROQ_API_KEY:?Set GROQ_API_KEY in your .env}
      - GROQ_MODEL=whisper-large-v3
      - GROQ_BASE=https://api.groq.com
      - GROQ_TIMEOUT_MS=6000

      # === OpenAI brain (GPT-4o mini) ===
      - OPENAI_API_KEY=${OPENAI_API_KEY:?Set OPENAI_API_KEY in your .env}
      - OPENAI_BASE=https://api.openai.com
      - OPENAI_CHAT_MODEL=gpt-4o-mini
      # Optional brain tuning (matches brain.py defaults; override if needed)
      - BRAIN_TIMEOUT_S=4.0
      - BRAIN_MAX_TOKENS=200
      - BRAIN_TEMP=0.3
      - BRAIN_TOP_P=1.0
      - BRAIN_FREQ_PENALTY=0.0
      - BRAIN_PRES_PENALTY=0.0
    depends_on:
      - mongo
    ports:
      - "7071:7071"
    restart: unless-stopped

networks:
  default:
    driver: bridge

volumes:
  mongo_data:
